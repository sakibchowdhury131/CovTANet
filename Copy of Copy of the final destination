{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Copy of the final destination","provenance":[{"file_id":"10ahqvEqhG0vZWsSO455wzyvgbvJDqiiC","timestamp":1595051527828},{"file_id":"19AnV2un2WiI94UBwoAIzoE4YeskNd2L6","timestamp":1594976889252}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"id":"8n5asy04y3vq","colab_type":"code","colab":{}},"source":["# %tensorflow_version 2.x                                                       #activate TPU sakib\n","\n","# import tensorflow as tf\n","# print(\"Tensorflow version \" + tf.__version__)\n","\n","# try:\n","#   tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection\n","#   print('Running on TPU ', tpu.cluster_spec().as_dict()['worker'])\n","# except ValueError:\n","#   raise BaseException('ERROR: Not connected to a TPU runtime; please see the previous cell in this notebook for instructions!')\n","\n","# tf.config.experimental_connect_to_cluster(tpu)\n","# tf.tpu.experimental.initialize_tpu_system(tpu)\n","# tpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ni1ngDbL4BMu","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1595008485334,"user_tz":-360,"elapsed":2576,"user":{"displayName":"maisoon r","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhLz-9_gwL7MKnY8mG23mZ_xgRnsiqrIhce65NJ_Q=s64","userId":"02529967476782766331"}},"outputId":"97089a35-776f-46a1-e7cc-90ddb3c8238d"},"source":["#Run this\n","from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"MFR6PwHR4CIe","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":69},"executionInfo":{"status":"ok","timestamp":1595050616439,"user_tz":-360,"elapsed":3017,"user":{"displayName":"maisoon r","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhLz-9_gwL7MKnY8mG23mZ_xgRnsiqrIhce65NJ_Q=s64","userId":"02529967476782766331"}},"outputId":"b2780587-83c5-4042-febc-be61e43adea9"},"source":["#Run this\n","#!pip install albumentations > /dev/null\n","#!pip install -U efficientnet==0.0.4\n","!pip install keras_efficientnets\n","#%tensorflow_version 1.x\n","import numpy as np\n","import pandas as pd\n","import gc\n","import keras\n","\n","import matplotlib.pyplot as plt\n","plt.style.use('seaborn-white')\n","import seaborn as sns\n","sns.set_style(\"white\")\n","\n","from sklearn.model_selection import train_test_split,StratifiedKFold\n","\n","from skimage.transform import resize\n","import tensorflow as tf\n","import keras.backend as K\n","from keras.losses import binary_crossentropy\n","\n","from keras.preprocessing.image import load_img\n","from keras import Model\n","from keras.callbacks import  ModelCheckpoint\n","from keras.layers import Input, Conv2D, Conv2DTranspose, MaxPooling2D, concatenate, Dropout,BatchNormalization\n","from keras.layers import Conv2D, Concatenate, MaxPooling2D\n","from keras.layers import UpSampling2D, Dropout, BatchNormalization, Multiply, Subtract\n","from tqdm import tqdm_notebook\n","from keras import initializers\n","from keras import regularizers\n","from keras import constraints\n","from keras.utils import conv_utils, plot_model\n","from keras.utils.data_utils import get_file\n","from keras.engine.topology import get_source_inputs\n","from keras.engine import InputSpec\n","from keras import backend as K\n","from keras.layers import LeakyReLU\n","from keras.layers import ZeroPadding2D\n","from keras.losses import binary_crossentropy\n","import keras.callbacks as callbacks\n","from keras.callbacks import Callback\n","from keras.applications.xception import Xception\n","from keras.layers import multiply\n","\n","\n","from keras import optimizers\n","from keras.legacy import interfaces\n","from keras.utils.generic_utils import get_custom_objects\n","\n","from keras.engine.topology import Input\n","from keras.engine.training import Model\n","from keras.layers.convolutional import Conv2D, UpSampling2D, Conv2DTranspose\n","from keras.layers.core import Activation, SpatialDropout2D\n","from keras.layers.merge import concatenate\n","from keras.layers.normalization import BatchNormalization\n","from keras.layers.pooling import MaxPooling2D\n","from keras.layers import Input,Dropout,BatchNormalization,Activation,Add\n","from keras.regularizers import l2\n","from keras.layers.core import Dense, Lambda\n","from keras.layers.merge import concatenate, add\n","from keras.layers import GlobalAveragePooling2D, Reshape, Dense, multiply, Permute\n","from keras.optimizers import *\n","from keras.preprocessing.image import ImageDataGenerator\n","\n","import glob\n","import shutil\n","import os\n","import random\n","from PIL import Image\n","\n","seed = 10\n","np.random.seed(seed)\n","random.seed(seed)\n","os.environ['PYTHONHASHSEED'] = str(seed)\n","np.random.seed(seed)\n","\n","#tf.set_random_seed(seed)\n","    \n","%matplotlib inline"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n","/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"8bnO2Ek_yo1k","colab_type":"code","colab":{}},"source":["from keras.layers import *\n","from keras.regularizers import *"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CeEVuBcOyqyu","colab_type":"code","colab":{}},"source":["def mse_block(x_input, nb_channel):  # this block takes a block of input shape (256, 256, nb_channels) )(256,256, 64)\n","  x_in1 = GlobalAveragePooling2D()(x_input)\n","  x_in1 = Dense(nb_channel//4 , activation = 'relu')(x_in1)\n","  x_in1 = Dense(nb_channel, activation = 'sigmoid')(x_in1)\n","  s1 = Multiply()([x_in1 , x_input])\n","\n","  x_in2 = Conv2D(filters = nb_channel, kernel_size = (3,3), strides = (2,2), padding = 'same')(x_input)\n","  x_in2 = Conv2DTranspose (filters = 1, kernel_size = (3,3), strides = (2,2), padding = 'same', activation = 'sigmoid')(x_in2)\n","  s2 = Multiply()([x_in2 , x_input])\n","  \n","  out = Concatenate() ([s1, s2])\n","  out = Conv2D (filters = nb_channel, kernel_size = (1,1),strides = (1,1), padding = 'same' , activation = 'relu')(out)\n","  out = Add()([out , x_input])\n","  return out"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iMDl-NwUxuq-","colab_type":"code","colab":{}},"source":["#HAD TO CHANGE THE MSE BLOCK\n","def mse_block(x_input):  # this block takes a block of input shape (256, 256, nb_channels) )(256,256, 64)\n","  x_in1 = GlobalAveragePooling2D()(x_input)\n","  x_in1 = Dense(int(x_input.shape[-1]//4) , activation = 'relu')(x_in1)\n","  x_in1 = Dense(int(x_input.shape[-1]), activation = 'sigmoid')(x_in1)\n","  s1 = Multiply()([x_in1 , x_input])\n","\n","  x_in2 = Conv2D(filters = int(x_input.shape[-1]), kernel_size = (3,3), strides = (2,2), padding = 'same')(x_input)\n","  x_in2 = Conv2DTranspose (filters = 1, kernel_size = (3,3), strides = (2,2), padding = 'same', activation = 'sigmoid')(x_in2)\n","  s2 = Multiply()([x_in2 , x_input])\n","  \n","\n","  out = Concatenate() ([s1, s2])\n","  out = Conv2D (filters = int(x_input.shape[-1]), kernel_size = (1,1),strides = (1,1), padding = 'same' , activation = 'relu')(out)\n","  out = Add()([out , x_input])\n","  return out"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XULuMwNLsaxi","colab_type":"code","colab":{}},"source":["def resnet_block(inputs, num_filters, kernel_size, strides, activation='relu'):  #https://github.com/avasid/Image-Object-Localization/blob/master/src/train.py?fbclid=IwAR2vFK5_-qnSii-hRn-QXmoMSUOfLZ3CLkLs1oBpQqI_YwOW6xzKdB9AnUI\n","    x = Conv2D(num_filters, kernel_size=kernel_size, strides=strides, padding='same',\n","                kernel_initializer='he_normal')(inputs)\n","    x = BatchNormalization()(x)\n","    if (activation):\n","        x = Activation('relu')(x)\n","    return x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bMO4VtzNzPXM","colab_type":"code","colab":{}},"source":["def conv2_x(x_input):\n","  \n","  x = MaxPooling2D([3, 3], 2, 'same')(x_input)\n","  for i in range(2):\n","      a = resnet_block(x, 64, [3, 3], 1)\n","      b = resnet_block(a, 64, [3, 3], 1, activation=None)\n","      x = add([x, b])\n","      x = Activation('relu')(x)\n","  return x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JpNpbPubF-dQ","colab_type":"code","colab":{}},"source":["def conv3_x(x_input):\n","  a = resnet_block(x_input, 128, [1, 1], 2)\n","  b = resnet_block(a, 128, [3, 3], 1, activation=None)\n","  x = Conv2D(128, kernel_size=[1, 1], strides=2, padding='same', kernel_initializer='he_normal',\n","              kernel_regularizer=l2(1e-3))(x_input)\n","  x = add([x, b])\n","  x = Activation('relu')(x)\n","\n","  a = resnet_block(x, 128, [3, 3], 1)\n","  b = resnet_block(a, 128, [3, 3], 1, activation=None)\n","  x = add([x, b])\n","  x = Activation('relu')(x)\n","  return x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lejxPQXnMpgk","colab_type":"code","colab":{}},"source":["\n","\n","def conv4_x(x_input):\n","  a = resnet_block(x_input, 256, [1, 1], 2)\n","  b = resnet_block(a, 256, [3, 3], 1, activation=None)\n","  x = Conv2D(256, kernel_size=[1, 1], strides=2, padding='same', kernel_initializer='he_normal',\n","              kernel_regularizer=l2(1e-3))(x_input)\n","  x = add([x, b])\n","  x = Activation('relu')(x)\n","\n","  a = resnet_block(x, 256, [3, 3], 1)\n","  b = resnet_block(a, 256, [3, 3], 1, activation=None)\n","  x = add([x, b])\n","  x = Activation('relu')(x)\n","  return x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_V-hkhC6OJEg","colab_type":"code","colab":{}},"source":["def conv5_x(x_input):\n","  a = resnet_block(x_input, 512, [1, 1], 2)\n","  b = resnet_block(a, 512, [3, 3], 1, activation=None)\n","  x = Conv2D(512, kernel_size=[1, 1], strides=2, padding='same', kernel_initializer='he_normal',\n","              kernel_regularizer=l2(1e-3))(x_input)\n","  x = add([x, b])\n","  x = Activation('relu')(x)\n","\n","  a = resnet_block(x, 512, [3, 3], 1)\n","  b = resnet_block(a, 512, [3, 3], 1, activation=None)\n","  x = add([x, b])\n","  x = Activation('relu')(x)\n","  \n","  return x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"V11lTs1S6B5M","colab_type":"code","colab":{}},"source":["def modified_resnet_18(x_input, input_channels = 64):\n","  x_in = Conv2D (filters = input_channels, kernel_size = (3,3), strides = (2,2), activation = 'relu', padding = 'same') (x_input)\n","  x_in = mse_block(x_in, nb_channel = input_channels) \n","  x_in = conv2_x (x_in)\n","  x_in = mse_block (x_in , nb_channel = input_channels)\n","  x_in = conv3_x (x_in)\n","  x_in = mse_block (x_in , nb_channel = input_channels*2)\n","  x_in = conv4_x (x_in) \n","  x_in = mse_block (x_in , nb_channel = input_channels*4)\n","  x_in = conv5_x (x_in) \n","  x_in = mse_block (x_in , nb_channel = input_channels*8)\n","  x_in = GlobalAveragePooling2D()(x_in)\n","  x_in = Dense(32)(x_in)\n","  return x_in\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_-FOXw7j5Pde","colab_type":"code","colab":{}},"source":["#Run this\n","im_dir = \"/content/drive/My Drive/CT_SCAN_SARS-COV_2/dataset/CLASSIFIER_PATIENT_WISE/train\"\n","a1 = os.path.join(im_dir, os.listdir(im_dir)[0])\n","a2 = os.path.join(im_dir, os.listdir(im_dir)[1])\n","bunches = 300\n","patients = len(os.listdir(a1))+len(os.listdir(a2))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LPZtvRgp5TQ6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1595008485339,"user_tz":-360,"elapsed":2497,"user":{"displayName":"maisoon r","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhLz-9_gwL7MKnY8mG23mZ_xgRnsiqrIhce65NJ_Q=s64","userId":"02529967476782766331"}},"outputId":"be51e623-306e-4e01-f17b-e3f5d9c41cfe"},"source":["#Run this\n","init = 0  #don't exceed 5\n","bunch_1= bunches/2\n","bunch_0= bunches/2\n","\n","if (len(os.listdir(a1))-bunch_1*(init+1)) <2: \n","  rest1 = int(len(os.listdir(a1))-bunch_1*(init+1))\n","else :\n","  rest1 = 0\n","\n","if (len(os.listdir(a2))-bunch_0*(init+1)) <2: \n","  rest2 = int(len(os.listdir(a2))-bunch_0*(init+1))\n","else :\n","  rest2 = 0\n","\n","X = np.empty((bunches+rest1+rest2, 256, 256, 3, 30), dtype= np.float64)\n","Y = np.empty((bunches+rest1+rest2), dtype= int)\n","\n","X.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(300, 256, 256, 3, 30)"]},"metadata":{"tags":[]},"execution_count":109}]},{"cell_type":"code","metadata":{"id":"6javssXC7H89","colab_type":"code","colab":{}},"source":["# #Run this\n","# import cv2\n","# for j in range(int(bunch_1*init), int(bunch_1*(init+1)+rest1)):\n","#     a1_1= os.path.join(a1, os.listdir(a1)[j])  #patients\n","#     a1_1_1= np.sort(random.sample(os.listdir(a1_1), 30))  #30 sampling\n","#     for m in range(len(a1_1_1)):\n","#         a111_im = os.path.join(a1_1, a1_1_1[m])\n","#         a111_im = cv2.imread(a111_im)\n","#         a111_im = resize(a111_im, (256, 256,3), anti_aliasing=True)\n","#         X[j, :,:,: ,m] = a111_im\n","#         print(\"patient : \" + str(j) + \" slice : \" +str(m))\n","#         Y[j] = 1\n","\n","# for j in range(int(bunch_1*(init+1)+rest1)+int(bunch_0*init),int(bunch_1*(init+1)+rest1)+int(bunch_0*(init+1)+rest2)):\n","#     a2_1= os.path.join(a2, os.listdir(a2)[j - int(bunch_0)])  #patients\n","#     a2_1_1= np.sort(random.sample(os.listdir(a2_1), 30))  #30 sampling\n","#     for m in range(len(a2_1_1)):\n","#         a211_im = os.path.join(a2_1, a2_1_1[m])\n","#         a211_im = cv2.imread(a211_im)\n","#         a211_im = resize(a211_im, (256, 256, 3), anti_aliasing=True)\n","#         X[j, :,:,:,m ] = a211_im\n","#         print(\"patient : \" + str(j) + \" slice : \" +str(m))\n","#         Y[j] = 0"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CqKz1y4F7KXg","colab_type":"code","colab":{}},"source":["# #Run this\n","# def shuffle_in_unison_scary(a, b):\n","#     rng_state = np.random.get_state()\n","#     np.random.shuffle(a)\n","#     np.random.set_state(rng_state)\n","#     np.random.shuffle(b)\n","#     return a, b\n","\n","# X,Y = shuffle_in_unison_scary(X,Y)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hLzQQHxittt_","colab_type":"code","colab":{}},"source":["#!pip install -U efficientnet==0.0.4"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"E_e1_eTcv3H8","colab_type":"code","colab":{}},"source":["#import tensorflow as tf"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"igDAhf-Rv7Gf","colab_type":"code","colab":{}},"source":["pip install git+https://github.com/qubvel/segmentation_models"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lS4iyRoh98eK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":360},"executionInfo":{"status":"ok","timestamp":1595009393973,"user_tz":-360,"elapsed":5847,"user":{"displayName":"maisoon r","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhLz-9_gwL7MKnY8mG23mZ_xgRnsiqrIhce65NJ_Q=s64","userId":"02529967476782766331"}},"outputId":"83b2528d-cd76-4730-a846-d723e3c50b03"},"source":["#pip install -U segmentation-models"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already up-to-date: segmentation-models in /usr/local/lib/python3.6/dist-packages (1.0.1)\n","Requirement already satisfied, skipping upgrade: efficientnet==1.0.0 in /usr/local/lib/python3.6/dist-packages (from segmentation-models) (1.0.0)\n","Requirement already satisfied, skipping upgrade: image-classifiers==1.0.0 in /usr/local/lib/python3.6/dist-packages (from segmentation-models) (1.0.0)\n","Requirement already satisfied, skipping upgrade: keras-applications<=1.0.8,>=1.0.7 in /usr/local/lib/python3.6/dist-packages (from segmentation-models) (1.0.8)\n","Requirement already satisfied, skipping upgrade: scikit-image in /usr/local/lib/python3.6/dist-packages (from efficientnet==1.0.0->segmentation-models) (0.16.2)\n","Requirement already satisfied, skipping upgrade: h5py in /usr/local/lib/python3.6/dist-packages (from keras-applications<=1.0.8,>=1.0.7->segmentation-models) (2.10.0)\n","Requirement already satisfied, skipping upgrade: numpy>=1.9.1 in /usr/local/lib/python3.6/dist-packages (from keras-applications<=1.0.8,>=1.0.7->segmentation-models) (1.18.5)\n","Requirement already satisfied, skipping upgrade: pillow>=4.3.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image->efficientnet==1.0.0->segmentation-models) (7.0.0)\n","Requirement already satisfied, skipping upgrade: matplotlib!=3.0.0,>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image->efficientnet==1.0.0->segmentation-models) (3.2.2)\n","Requirement already satisfied, skipping upgrade: networkx>=2.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image->efficientnet==1.0.0->segmentation-models) (2.4)\n","Requirement already satisfied, skipping upgrade: PyWavelets>=0.4.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image->efficientnet==1.0.0->segmentation-models) (1.1.1)\n","Requirement already satisfied, skipping upgrade: scipy>=0.19.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image->efficientnet==1.0.0->segmentation-models) (1.4.1)\n","Requirement already satisfied, skipping upgrade: imageio>=2.3.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image->efficientnet==1.0.0->segmentation-models) (2.4.1)\n","Requirement already satisfied, skipping upgrade: six in /usr/local/lib/python3.6/dist-packages (from h5py->keras-applications<=1.0.8,>=1.0.7->segmentation-models) (1.12.0)\n","Requirement already satisfied, skipping upgrade: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image->efficientnet==1.0.0->segmentation-models) (1.2.0)\n","Requirement already satisfied, skipping upgrade: cycler>=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image->efficientnet==1.0.0->segmentation-models) (0.10.0)\n","Requirement already satisfied, skipping upgrade: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image->efficientnet==1.0.0->segmentation-models) (2.8.1)\n","Requirement already satisfied, skipping upgrade: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image->efficientnet==1.0.0->segmentation-models) (2.4.7)\n","Requirement already satisfied, skipping upgrade: decorator>=4.3.0 in /usr/local/lib/python3.6/dist-packages (from networkx>=2.0->scikit-image->efficientnet==1.0.0->segmentation-models) (4.4.2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GMLOQIy2nlaX","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":373},"executionInfo":{"status":"error","timestamp":1595051330932,"user_tz":-360,"elapsed":1165,"user":{"displayName":"maisoon r","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhLz-9_gwL7MKnY8mG23mZ_xgRnsiqrIhce65NJ_Q=s64","userId":"02529967476782766331"}},"outputId":"d84d1209-2a3e-4adc-da72-e21742757a01"},"source":["import efficientnet.keras as efn \n","\n","backbone = efn.EfficientNetB5(weights='imagenet',include_top=False,\n","                          input_shape=(256, 256, 3))\n","\n","# backbone = efficientnet.EfficientNetB4(weights='imagenet',\n","#                           include_top=False,\n","#                           input_shape=(256, 256, 3))\n","\n","backbone = Model(backbone.input, backbone.layers[371].output)\n","backbone.summary()"],"execution_count":null,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-33a1b5f688f8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mefficientnet\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mefn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m backbone = efn.EfficientNetB5(weights='imagenet',include_top=False,\n\u001b[1;32m      4\u001b[0m                           input_shape=(256, 256, 3))\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'efficientnet'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"]}]},{"cell_type":"code","metadata":{"id":"V0fyGPZ04Zz6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":367},"executionInfo":{"status":"error","timestamp":1595009283743,"user_tz":-360,"elapsed":1212,"user":{"displayName":"maisoon r","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhLz-9_gwL7MKnY8mG23mZ_xgRnsiqrIhce65NJ_Q=s64","userId":"02529967476782766331"}},"outputId":"e22e2bc5-153d-4b45-8d12-3e7a7d6060cf"},"source":["# #OUR GOOD OLD EFFICIENTNET\n","\n","# from efficientnet import EfficientNetB4\n","\n","# backbone = EfficientNetB4(weights='imagenet',\n","#                           include_top=False,\n","#                           input_shape=(256, 256, 3))\n","\n","# backbone = Model(backbone.input, backbone.layers[371].output)\n","# backbone.summary()"],"execution_count":null,"outputs":[{"output_type":"error","ename":"ImportError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m<ipython-input-119-322c164702f5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#OUR GOOD OLD EFFICIENTNET\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mefficientnet\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mEfficientNetB4\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m backbone = EfficientNetB4(weights='imagenet',\n","\u001b[0;31mImportError\u001b[0m: cannot import name 'EfficientNetB4'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"]}]},{"cell_type":"code","metadata":{"id":"W-F_6su7d7XE","colab_type":"code","colab":{}},"source":["def M_unet(backbone, heavier=0):\n","  a1 = backbone.layers[30].output   #128x128x144       |\n","  a2 = backbone.layers[92].output   #64x64x192         |\n","  a3 = backbone.layers[154].output  #32x32x336         |    <--encoder\n","  a4 = backbone.layers[342].output  #16x16x960         |\n","  a5 = backbone.layers[-1].output   #8x8x1632          |\n","  \n","  def just_conv(x, filter_, ker=3, up=0):\n","      if up:  x= UpSampling2D((2,2))(x)\n","      x = Conv2D(filter_, (ker,ker), activation='relu', padding='same')(x)\n","      return x\n","\n","  factor=1\n","  if heavier: factor=2\n","\n","  a10 = just_conv(a1, 16*factor, up=1)\n","  a20 = just_conv(a2, 32*factor, up=1)\n","  a30 = just_conv(a3, 64*factor, up=1)\n","  a40 = just_conv(a4, 128*factor, up=1)\n","  a50 = just_conv(a5, 256*factor, up=1)\n","\n","  a10 = PYRAMID(a10)\n","  a10 = mse_block(a10)\n","  a20 = PYRAMID(a20)\n","  a20 = mse_block(a20)\n","  a30 = PYRAMID(a30)\n","  a30 = mse_block(a30)\n","  a40 = PYRAMID(a40)\n","  a40 = mse_block(a40)\n","  #print(a40.shape)\n","  a50 = PYRAMID(a50)\n","  a50 = mse_block(a50)\n","  #print(a50.shape)\n","  \n","  b6 = just_conv(a5, 256*factor)                                    #           |            \n","  b6 = just_conv(b6, 256*factor, up=1)\n","\n","  b5 = concatenate([b6,a50], axis=-1)                               #           |\n","  b5 = just_conv(b5, 256*factor)\n","  b5 = Conv2D(256*factor, (3,3), activation='relu', padding='same', name = 'up5')(b5)\n","  #b5 = just_conv(b5, 256*factor)\n","\n","  print (just_conv(b5, 256*factor, up=1).shape)\n","  b4 = concatenate([just_conv(b5, 256*factor, up=1), a40], axis=-1) #           | # EKHANE JHAMELA\n","  b4 = just_conv(b4, 128*factor)\n","  b4 = Conv2D(128*factor, (3,3), activation='relu', padding='same', name = 'up6')(b4)\n","\n","  b3 = concatenate([just_conv(b4, 128*factor, up=1), a30], axis=-1) #           |  <--decoder\n","  b3 = just_conv(b3, 64*factor)\n","  b3 = Conv2D(64*factor, (3,3), activation='relu', padding='same', name = 'up7')(b3)\n","\n","  b2 = concatenate([just_conv(b3, 64*factor, up=1), a20], axis=-1)  #           |\n","  b2 = just_conv(b2, 32*factor)\n","  b2 = Conv2D(32*factor, (3,3), activation='relu', padding='same', name = 'up8')(b2)\n","\n","  b1 = concatenate([just_conv(b2, 32*factor, up=1), a10], axis=-1)  #           |\n","  b1 = just_conv(b1, 16*factor)\n","  b1 = Conv2D(16*factor, (3,3), activation='relu', padding='same', name = 'up9')(b1)                       #           |\n","\n","  out = Conv2D(1, (1, 1), activation='sigmoid')(b1)\n","\n","  model= Model(backbone.input, out)\n","\n","  #print(b5.shape)\n","  #print(b4.shape)\n","  #print(b3.shape)\n","  #print(b2.shape)\n","  #print(b1.shape)\n","  return model\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"t4Qb_kgyevNu","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":200},"executionInfo":{"status":"error","timestamp":1595051320561,"user_tz":-360,"elapsed":1123,"user":{"displayName":"maisoon r","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhLz-9_gwL7MKnY8mG23mZ_xgRnsiqrIhce65NJ_Q=s64","userId":"02529967476782766331"}},"outputId":"8ed35091-e6ea-4be3-f59d-8036d904898a"},"source":["modified_unet = M_unet(backbone, 0)\n","\n","modified_unet.load_weights ('/content/drive/My Drive/CT_SCAN_SARS-COV_2/h5s/m_unet_ep160_light_lr5e_4.h5')   #paste the h5 file path "],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-2292755d42c3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmodified_unet\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mM_unet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbackbone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mmodified_unet\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_weights\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/My Drive/CT_SCAN_SARS-COV_2/h5s/m_unet_ep160_light_lr5e_4.h5'\u001b[0m\u001b[0;34m)\u001b[0m   \u001b[0;31m#paste the h5 file path\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'backbone' is not defined"]}]},{"cell_type":"code","metadata":{"id":"iCxK50X_NBVH","colab_type":"code","colab":{}},"source":["#Run this\n","for layer in modified_unet.layers:\n","\tlayer.trainable = False"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rg6LPobRbNhq","colab_type":"code","colab":{}},"source":["def m_attention_block(slice_x, unet = modified_unet):\n","        basket=[]\n","        for i in range(5,10):\n","          name = \"up\"+str(i)\n","          out = unet.get_layer(name).output\n","          temp_model = Model(inputs = unet.input, outputs = out)\n","          x2 = temp_model(slice_x)\n","         \n","          x = mse_block(x2)          \n","          #x = Add()([x, x2])\n","\n","          x = Conv2D(64, (1,1), activation= \"relu\", padding=\"same\")(x2)\n","          \n","\n","          while x.shape[1]!= 256: x= UpSampling2D((2,2))(x)\n","          x = Conv2D(3, (3,3), activation= \"sigmoid\", padding=\"same\")(x)\n","          x = Multiply()([slice_x, x])\n","          \n","          #x = model_vgg(x)\n","          #x = Conv2D(64, (1,1), activation= \"relu\", padding=\"same\")(x)\n","          basket.append(x)\n","        x = Concatenate(axis=-1)(basket)\n","        \n","        return x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"rhWCGth_nlvA","colab":{}},"source":["# THE INSIDE OF THE MODEL SHOULD BE SOMETHING LIKE THISD\n","from keras.optimizers import Adam\n","def final_destination(in_shape, modified_resnet = modified_resnet_18, unet = modified_unet, ATTENTION = m_attention_block ): \n","  x_in = Input(in_shape)\n","  slice_num= x_in.shape[-1]\n","      \n","  branch = []\n","\n","  for i in range(slice_num):  \n","          print(i)\n","          x_out = Lambda(lambda x: x[:,:,:,:,i])(x_in)\n","          x_out_1 = m_attention_block(x_out)  #same\n","          x_out_1 = modified_resnet_18(x_out_1)\n","          branch.append(x_out_1)\n","\n","  x = Concatenate(axis=-1)(branch)\n","  print(x.shape)\n","\n","  x = Dense(128, activation='relu')(x)  \n","  x = Dense(64, activation='relu')(x)\n","  y = Dense(1, activation='sigmoid')(x)\n","  print(y.shape)\n","\n","  model = Model (inputs = x_in , outputs = y)\n","  model.compile (optimizers = Adam(learning_rate= 1e-3), loss = 'binary_crossentropy' , metrics = ['accuracy'])\n","\n","\n","        "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-h0jxhh6pZHG","colab_type":"code","colab":{}},"source":["with tpu_strategy.scope(): # creating the model in the TPUStrategy scope means we will train the model on the TPU\n","  model = final_destination ((256,256,3,30) , )\n","model.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-mwUMhsRqk3F","colab_type":"code","colab":{}},"source":["#Run this\n","from keras.callbacks import *\n","\n","weight_saver = ModelCheckpoint('final_destination.h5', monitor='accuracy', \n","                                save_best_only=True, save_weights_only=True , mode = 'max')\n","annealer = ReduceLROnPlateau(monitor='val_loss', factor=0.5,\n","                              patience=5, min_lr=0.0001, mode = 'min')\n","\n","\n","hist = model_approach.fit(x = X , \n","                          y = Y, \n","                          batch_size = 2,\n","                          epochs = 50,\n","                          callbacks = [weight_saver , annealer],\n","                          validation_split = 0.2,\n","                          shuffle = False,\n","                          verbose = 1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"iRtXozOaG7UZ","colab":{}},"source":["def PYRAMID(x_input): # number of channels should be power of 2\n","  \n","\n","  track_1 = Conv2D(filters = int(x_input.shape[-1]//4), kernel_size=(1, 1), strides=1, padding='same', kernel_regularizer=l2(1e-3))(x_input)\n","\n","  track_2 = AveragePooling2D(pool_size=(2, 2) , strides=2, padding = 'same')(x_input)\n","  track_2 = Conv2D(filters = int(x_input.shape[-1]//4), kernel_size=(1, 1), strides=1, padding='same', kernel_regularizer=l2(1e-3))(track_2)\n","  track_2 = UpSampling2D((2,2))(track_2)\n","  print(track_2.shape)\n","\n","  track_3 = AveragePooling2D(pool_size=(4, 4) , strides=4, padding = 'same')(x_input)\n","  track_3 = Conv2D(filters = int(x_input.shape[-1]//4), kernel_size=(1, 1), strides=1, padding='same', kernel_regularizer=l2(1e-3))(track_3)\n","  track_3 = UpSampling2D((4,4))(track_3)\n","  print(track_3.shape)\n","\n","  track_4 = AveragePooling2D(pool_size=(8, 8) , strides=8 , padding = 'same')(x_input)\n","  track_4 = Conv2D(filters = int(x_input.shape[-1]//4), kernel_size=(1, 1), strides=1, padding='same', kernel_regularizer=l2(1e-3))(track_4)\n","  track_4 = UpSampling2D((8,8))(track_4)\n","  print(track_4.shape)\n","\n","  x_out_1 = Concatenate(axis = -1)([track_1, track_2 , track_3,track_4, x_input])\n","  \n","\n","  x_out_1 = Conv2D(filters = int(x_out_1.shape[-1]//2), kernel_size=(1, 1), strides=1, padding='same', kernel_regularizer=l2(1e-3))(x_out_1)\n","  x_out_1 = Add()([x_input , x_out_1])\n","  return x_out_1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Fyx9GoQ9N_0o","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":780},"executionInfo":{"status":"ok","timestamp":1595051012989,"user_tz":-360,"elapsed":1052,"user":{"displayName":"maisoon r","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhLz-9_gwL7MKnY8mG23mZ_xgRnsiqrIhce65NJ_Q=s64","userId":"02529967476782766331"}},"outputId":"7ecf1d06-e345-4b26-e089-622692b37d59"},"source":["xin = Input((8,8,16))\n","xout = PYRAMID(xin)\n","\n","\n","model = Model (inputs = xin, outputs = xout)\n","model.summary()\n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(None, 8, 8, 4)\n","(None, 8, 8, 4)\n","(None, 8, 8, 4)\n","Model: \"model_5\"\n","__________________________________________________________________________________________________\n","Layer (type)                    Output Shape         Param #     Connected to                     \n","==================================================================================================\n","input_5 (InputLayer)            (None, 8, 8, 16)     0                                            \n","__________________________________________________________________________________________________\n","average_pooling2d_13 (AveragePo (None, 4, 4, 16)     0           input_5[0][0]                    \n","__________________________________________________________________________________________________\n","average_pooling2d_14 (AveragePo (None, 2, 2, 16)     0           input_5[0][0]                    \n","__________________________________________________________________________________________________\n","average_pooling2d_15 (AveragePo (None, 1, 1, 16)     0           input_5[0][0]                    \n","__________________________________________________________________________________________________\n","conv2d_22 (Conv2D)              (None, 4, 4, 4)      68          average_pooling2d_13[0][0]       \n","__________________________________________________________________________________________________\n","conv2d_23 (Conv2D)              (None, 2, 2, 4)      68          average_pooling2d_14[0][0]       \n","__________________________________________________________________________________________________\n","conv2d_24 (Conv2D)              (None, 1, 1, 4)      68          average_pooling2d_15[0][0]       \n","__________________________________________________________________________________________________\n","conv2d_21 (Conv2D)              (None, 8, 8, 4)      68          input_5[0][0]                    \n","__________________________________________________________________________________________________\n","up_sampling2d_13 (UpSampling2D) (None, 8, 8, 4)      0           conv2d_22[0][0]                  \n","__________________________________________________________________________________________________\n","up_sampling2d_14 (UpSampling2D) (None, 8, 8, 4)      0           conv2d_23[0][0]                  \n","__________________________________________________________________________________________________\n","up_sampling2d_15 (UpSampling2D) (None, 8, 8, 4)      0           conv2d_24[0][0]                  \n","__________________________________________________________________________________________________\n","concatenate_5 (Concatenate)     (None, 8, 8, 32)     0           conv2d_21[0][0]                  \n","                                                                 up_sampling2d_13[0][0]           \n","                                                                 up_sampling2d_14[0][0]           \n","                                                                 up_sampling2d_15[0][0]           \n","                                                                 input_5[0][0]                    \n","__________________________________________________________________________________________________\n","conv2d_25 (Conv2D)              (None, 8, 8, 16)     528         concatenate_5[0][0]              \n","__________________________________________________________________________________________________\n","add_4 (Add)                     (None, 8, 8, 16)     0           input_5[0][0]                    \n","                                                                 conv2d_25[0][0]                  \n","==================================================================================================\n","Total params: 800\n","Trainable params: 800\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"gYUkHDLzbdll","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}